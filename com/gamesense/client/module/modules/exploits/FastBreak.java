/*
 * Decompiled with CFR 0.152.
 */
package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.Phase;
import com.gamesense.api.event.events.DamageBlockEvent;
import com.gamesense.api.event.events.OnUpdateWalkingPlayerEvent;
import com.gamesense.api.event.events.RenderEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.ColorSetting;
import com.gamesense.api.setting.values.DoubleSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.player.InventoryUtil;
import com.gamesense.api.util.player.PlayerPacket;
import com.gamesense.api.util.player.RotationUtil;
import com.gamesense.api.util.render.GSColor;
import com.gamesense.api.util.render.RenderUtil;
import com.gamesense.api.util.world.BlockUtil;
import com.gamesense.client.manager.managers.PlayerPacketManager;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import com.gamesense.client.module.modules.combat.CevBreaker;
import com.gamesense.client.module.modules.combat.PistonCrystal;
import java.util.Arrays;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.init.MobEffects;
import net.minecraft.item.Item;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec2f;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.math.Vec3i;
import net.minecraft.world.World;

@Module.Declaration(name="FastBreak", category=Category.Exploits, priority=250)
public class FastBreak
extends Module {
    ModeSetting mode = this.registerMode("Mode", Arrays.asList("Packet", "Damage", "Instant", "Breaker"), "Packet");
    BooleanSetting continueBreaking = this.registerBoolean("Continue Breaking", true);
    BooleanSetting disableContinueShift = this.registerBoolean("Disable Continue Shift", true, () -> (Boolean)this.continueBreaking.getValue());
    BooleanSetting continueBreakingAlways = this.registerBoolean("Always Continue", false, () -> (Boolean)this.continueBreaking.getValue());
    DoubleSetting startDamage = this.registerDouble("Start Damage", 0.1, 0.0, 1.0, () -> ((String)this.mode.getValue()).equals("Damage"));
    DoubleSetting endDamage = this.registerDouble("End Damage", 0.9, 0.0, 1.0, () -> ((String)this.mode.getValue()).equals("Damage"));
    BooleanSetting haste = this.registerBoolean("Haste", false, () -> ((String)this.mode.getValue()).equals("Damage"));
    BooleanSetting switchPick = this.registerBoolean("Switch Pick", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    BooleanSetting switchBack = this.registerBoolean("Switch Back", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    BooleanSetting silentSwitch = this.registerBoolean("Silent Switch", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    BooleanSetting stopEating = this.registerBoolean("Stop Eating", false, () -> (((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet")) && (Boolean)this.silentSwitch.getValue() != false);
    BooleanSetting spammer = this.registerBoolean("Spammer", false, () -> ((String)this.mode.getValue()).equals("Breaker"));
    BooleanSetting ignoreChecks = this.registerBoolean("Ignore Checks", false, () -> ((String)this.mode.getValue()).equals("Breaker"));
    BooleanSetting onlyOnPick = this.registerBoolean("Only On Pick", false, () -> ((String)this.mode.getValue()).equals("Breaker"));
    BooleanSetting startPick = this.registerBoolean("Start Pick", false, () -> ((String)this.mode.getValue()).equals("Breaker"));
    IntegerSetting resetTickDestroy = this.registerInteger("Tick Reset Destroy", 0, 0, 50, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    IntegerSetting pickTickSwitch = this.registerInteger("Pick Switch Destroy", 75, 0, 200, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    IntegerSetting pickStill = this.registerInteger("Pick Switch Still", 20, 0, 30, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    BooleanSetting showProgress = this.registerBoolean("Show Progress", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    ColorSetting progressColor = this.registerColor("Progress Color", new GSColor(255, 255, 255), () -> (((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet")) && (Boolean)this.showProgress.getValue() != false);
    BooleanSetting sus = this.registerBoolean("Non-Linear Render", false, () -> (Boolean)this.showProgress.getValue() != false && this.showProgress.isVisible());
    IntegerSetting spammerTickDelay = this.registerInteger("Spammer Delay", 0, 0, 75, () -> ((String)this.mode.getValue()).equals("Breaker"));
    IntegerSetting breakerTickDelay = this.registerInteger("Breaker Delay", 0, 0, 75, () -> ((String)this.mode.getValue()).equals("Breaker"));
    BooleanSetting forceRotation = this.registerBoolean("Force Rotation", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    IntegerSetting rangeDisableBreaker = this.registerInteger("Range Disable Breaker", 15, 6, 50, () -> ((String)this.mode.getValue()).equals("Breaker"));
    BooleanSetting display = this.registerBoolean("Display", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    ColorSetting blockColor = this.registerColor("Block Color", new GSColor(255, 0, 0), () -> (((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet")) && (Boolean)this.display.getValue() != false);
    ColorSetting doneColor = this.registerColor("Done Color", new GSColor(0, 255, 0), () -> (((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet")) && (Boolean)this.display.getValue() != false);
    ModeSetting renderMode = this.registerMode("Render", Arrays.asList("Outline", "Fill", "Both"), "Both", () -> (((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet")) && (Boolean)this.display.getValue() != false);
    IntegerSetting width = this.registerInteger("Width", 1, 1, 10, () -> (((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet")) && (Boolean)this.display.getValue() != false);
    BooleanSetting debugChat = this.registerBoolean("Debug Chat", false, () -> ((String)this.mode.getValue()).equals("Breaker") || ((String)this.mode.getValue()).equals("Packet"));
    private int tick = 99;
    private int tickSpammer = 0;
    private int oldslot;
    private int breakTick = 0;
    private int wait = 100;
    private BlockPos lastBlock = null;
    private BlockPos continueBlock = null;
    private boolean pickStillBol = false;
    private boolean ready = false;
    private EnumFacing direction;
    private boolean minedBefore = false;
    private int reseTick;
    private Vec3d lastHitVec = null;
    @EventHandler
    private final Listener<OnUpdateWalkingPlayerEvent> onUpdateWalkingPlayerEventListener = new Listener<OnUpdateWalkingPlayerEvent>(event -> {
        if (event.getPhase() != Phase.PRE || this.lastHitVec == null || !((Boolean)this.forceRotation.getValue()).booleanValue() || this.lastBlock == null) {
            return;
        }
        Vec2f rotation = RotationUtil.getRotationTo(this.lastHitVec);
        PlayerPacket packet = new PlayerPacket((Module)this, rotation);
        PlayerPacketManager.INSTANCE.addPacket(packet);
    }, new Predicate[0]);
    boolean broke = false;
    @EventHandler
    private final Listener<DamageBlockEvent> listener = new Listener<DamageBlockEvent>(event -> {
        if (FastBreak.mc.field_71441_e == null || FastBreak.mc.field_71439_g == null) {
            return;
        }
        if (!this.canBreak(event.getBlockPos()) || event.getBlockPos() == null) {
            return;
        }
        if (CevBreaker.forceBrk) {
            this.breakerAlgo((DamageBlockEvent)event);
            return;
        }
        if (((Boolean)this.forceRotation.getValue()).booleanValue()) {
            this.setVec3d(event.getBlockPos(), event.getEnumFacing());
        }
        if (((Boolean)this.continueBreaking.getValue()).booleanValue()) {
            this.continueBlock = event.getBlockPos();
        }
        switch ((String)this.mode.getValue()) {
            case "Packet": {
                FastBreak.mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                event.cancel();
                this.lastBlock = event.getBlockPos();
                this.direction = event.getEnumFacing();
                this.oldslot = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
                this.tick = 0;
                this.wait = (Integer)this.pickTickSwitch.getValue();
                this.ready = false;
                this.pickStillBol = false;
                break;
            }
            case "Damage": {
                if ((double)FastBreak.mc.field_71442_b.field_78770_f < (Double)this.startDamage.getValue()) {
                    FastBreak.mc.field_71442_b.field_78770_f = ((Double)this.startDamage.getValue()).floatValue();
                }
                if (!((double)FastBreak.mc.field_71442_b.field_78770_f >= (Double)this.endDamage.getValue())) break;
                FastBreak.mc.field_71442_b.field_78770_f = 1.0f;
                break;
            }
            case "Instant": {
                FastBreak.mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                FastBreak.mc.field_71442_b.func_187103_a(event.getBlockPos());
                FastBreak.mc.field_71441_e.func_175698_g(event.getBlockPos());
                break;
            }
            case "Breaker": {
                this.breakerAlgo((DamageBlockEvent)event);
            }
        }
    }, new Predicate[0]);

    @Override
    public void onUpdate() {
        if (((Boolean)this.continueBreaking.getValue()).booleanValue() && this.continueBlock != null) {
            if (((Boolean)this.disableContinueShift.getValue()).booleanValue() && FastBreak.mc.field_71474_y.field_74311_E.func_151470_d()) {
                this.continueBlock = null;
            } else {
                if (BlockUtil.getBlock(this.continueBlock) instanceof BlockAir) {
                    this.broke = true;
                }
                if (!(BlockUtil.getBlock(this.continueBlock) instanceof BlockAir) && (this.broke || ((Boolean)this.continueBreakingAlways.getValue()).booleanValue())) {
                    FastBreak.mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                    FastBreak.mc.field_71442_b.func_180512_c(this.continueBlock, EnumFacing.UP);
                    this.broke = false;
                }
            }
        }
        if (this.tick != 99 && this.tick++ >= this.wait) {
            int prev = FastBreak.mc.field_71439_g.field_71071_by.field_70461_c;
            this.ready = true;
            if (((Boolean)this.switchPick.getValue()).booleanValue() && this.oldslot != -1) {
                if (((Boolean)this.silentSwitch.getValue()).booleanValue()) {
                    FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketHeldItemChange(this.oldslot));
                    FastBreak.mc.field_71442_b.func_78765_e();
                    if (this.lastBlock != null && this.direction != null) {
                        FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, this.lastBlock, this.direction));
                    }
                    if (((Boolean)this.stopEating.getValue()).booleanValue() && FastBreak.mc.field_71439_g.func_184587_cr()) {
                        FastBreak.mc.field_71439_g.func_184597_cx();
                    }
                } else {
                    FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = this.oldslot;
                }
                this.oldslot = -1;
            }
            if (!this.pickStillBol) {
                if ((Integer)this.pickTickSwitch.getValue() != 0 && ((Boolean)this.switchPick.getValue()).booleanValue()) {
                    this.wait = (Integer)this.pickStill.getValue();
                    this.tick = 0;
                    this.oldslot = prev;
                    this.pickStillBol = true;
                } else {
                    this.tick = 99;
                    if (((Boolean)this.silentSwitch.getValue()).booleanValue()) {
                        FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketHeldItemChange(prev));
                        FastBreak.mc.field_71442_b.func_78765_e();
                    } else {
                        FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = prev;
                    }
                }
            } else {
                this.tick = 99;
            }
        }
        FastBreak.mc.field_71442_b.field_78781_i = 0;
        if (((Boolean)this.haste.getValue()).booleanValue()) {
            PotionEffect effect = new PotionEffect(MobEffects.field_76422_e, 80950, 1, false, false);
            FastBreak.mc.field_71439_g.func_70690_d(new PotionEffect(effect));
        }
        if (!((Boolean)this.haste.getValue()).booleanValue() && FastBreak.mc.field_71439_g.func_70644_a(MobEffects.field_76422_e)) {
            FastBreak.mc.field_71439_g.func_184589_d(MobEffects.field_76422_e);
        }
        if ((!((Boolean)this.onlyOnPick.getValue()).booleanValue() || FastBreak.mc.field_71439_g.func_184614_ca().func_77973_b() instanceof ItemPickaxe) && (((String)this.mode.getValue()).equals("Breaker") && !CevBreaker.isPossible || CevBreaker.forceBrk) && this.lastBlock != null && ((Boolean)this.spammer.getValue()).booleanValue() && this.tickSpammer++ >= (Integer)this.spammerTickDelay.getValue()) {
            this.tickSpammer = 0;
            if (BlockUtil.getBlock(this.lastBlock) instanceof BlockAir) {
                this.minedBefore = true;
                this.reseTick = 0;
                this.lastHitVec = null;
            }
            if (this.minedBefore) {
                if ((Integer)this.resetTickDestroy.getValue() != 0 && this.reseTick++ >= (Integer)this.resetTickDestroy.getValue() && !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) {
                    FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, this.lastBlock, this.direction));
                    this.breakerBreak();
                    this.reseTick = 0;
                    this.minedBefore = false;
                    if (((Boolean)this.debugChat.getValue()).booleanValue()) {
                        PistonCrystal.printDebug("Reset Block", false);
                    }
                    return;
                }
                if (((Boolean)this.ignoreChecks.getValue()).booleanValue() || !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) {
                    if (((Boolean)this.forceRotation.getValue()).booleanValue()) {
                        this.setVec3d(this.lastBlock, this.direction);
                    }
                    if (FastBreak.mc.field_71439_g.func_174818_b(this.lastBlock) >= (double)((Integer)this.rangeDisableBreaker.getValue()).intValue()) {
                        this.lastBlock = null;
                    } else {
                        this.breakerBreak();
                    }
                }
            }
        }
    }

    private void breakerBreak() {
        Item item = FastBreak.mc.field_71439_g.field_71071_by.func_70448_g().func_77973_b();
        int oldSlot = -1;
        if (!(item instanceof ItemPickaxe) && this.minedBefore && (((Boolean)this.switchBack.getValue()).booleanValue() || ((Boolean)this.switchPick.getValue()).booleanValue())) {
            oldSlot = FastBreak.mc.field_71439_g.field_71071_by.field_70461_c;
            int slot = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
            if (slot != -1) {
                FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = slot;
            }
        }
        FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, this.lastBlock, this.direction));
        if (oldSlot != -1 && ((Boolean)this.switchBack.getValue()).booleanValue()) {
            this.tick = 0;
            this.oldslot = oldSlot;
            if (!this.minedBefore || ((String)this.mode.getValue()).equals("Packet") && !CevBreaker.forceBrk) {
                this.wait = (Integer)this.pickTickSwitch.getValue();
                this.pickStillBol = (Boolean)this.switchBack.getValue() == false;
            } else {
                this.wait = (Integer)this.pickStill.getValue();
            }
        }
    }

    private void setVec3d(BlockPos pos, EnumFacing side) {
        BlockPos neighbour = pos.func_177972_a(side);
        EnumFacing opposite = side.func_176734_d();
        this.lastHitVec = new Vec3d((Vec3i)neighbour).func_72441_c(0.5, 0.5, 0.5).func_178787_e(new Vec3d(opposite.func_176730_m()).func_186678_a(0.5));
    }

    private void breakerAlgo(DamageBlockEvent event) {
        if (this.lastBlock == null || event.getBlockPos().field_177962_a != this.lastBlock.field_177962_a || event.getBlockPos().field_177960_b != this.lastBlock.field_177960_b || event.getBlockPos().field_177961_c != this.lastBlock.field_177961_c) {
            int pick;
            if (((Boolean)this.startPick.getValue()).booleanValue() && (pick = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9)) != -1) {
                FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = pick;
            }
            this.minedBefore = false;
            FastBreak.mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
            FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
            this.lastBlock = event.getBlockPos();
            this.direction = event.getEnumFacing();
        }
        if ((Integer)this.breakerTickDelay.getValue() <= this.breakTick++) {
            this.breakerBreak();
            event.cancel();
            this.breakTick = 0;
        }
        this.wait = (Integer)this.pickTickSwitch.getValue();
        this.ready = false;
        this.tick = 0;
        if (!CevBreaker.isActive && ((Boolean)this.switchPick.getValue()).booleanValue()) {
            this.oldslot = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
            this.pickStillBol = (Boolean)this.switchBack.getValue() == false;
        }
    }

    private boolean canBreak(BlockPos pos) {
        IBlockState blockState = FastBreak.mc.field_71441_e.func_180495_p(pos);
        Block block = blockState.func_177230_c();
        return block.func_176195_g(blockState, (World)FastBreak.mc.field_71441_e, pos) != -1.0f;
    }

    @Override
    public void onDisable() {
        if (((Boolean)this.haste.getValue()).booleanValue()) {
            FastBreak.mc.field_71439_g.func_184589_d(MobEffects.field_76422_e);
        }
        this.breakTick = 0;
        this.continueBlock = null;
    }

    @Override
    public void onWorldRender(RenderEvent event) {
        if (this.lastBlock != null) {
            if (FastBreak.mc.field_71439_g.func_174818_b(this.lastBlock) >= (double)((Integer)this.rangeDisableBreaker.getValue()).intValue()) {
                this.lastBlock = null;
            } else if (((Boolean)this.display.getValue()).booleanValue()) {
                if (((String)this.mode.getValue()).equals("Breaker") || CevBreaker.forceBrk || ((String)this.mode.getValue()).equals("Packet") && !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir) || ((String)this.mode.getValue()).equals("Packer")) {
                    this.renderBox(this.lastBlock);
                } else {
                    this.lastBlock = null;
                }
            }
        }
    }

    private void renderBox(BlockPos blockPos) {
        GSColor color = this.ready ? this.doneColor.getValue() : this.blockColor.getValue();
        float prognum = (float)this.tick / (float)((Integer)this.pickTickSwitch.getValue()).intValue() * 100.0f / Blocks.field_150343_Z.field_149782_v * FastBreak.mc.field_71441_e.func_180495_p((BlockPos)blockPos).func_177230_c().field_149782_v;
        if (((Boolean)this.showProgress.getValue()).booleanValue()) {
            String[] stringArray;
            if (this.ready) {
                String[] stringArray2 = new String[1];
                stringArray = stringArray2;
                stringArray2[0] = "100%";
            } else {
                String[] stringArray3 = new String[1];
                stringArray = stringArray3;
                stringArray3[0] = String.format("%.02f%%", Float.valueOf(prognum));
            }
            String[] progress = stringArray;
            RenderUtil.drawNametag((double)blockPos.func_177958_n() + 0.5, (double)blockPos.func_177956_o() + 0.5, (double)blockPos.func_177952_p() + 0.5, progress, this.progressColor.getColor(), 1);
        }
        this.renderESP(new AxisAlignedBB(blockPos), prognum, color);
    }

    private void renderESP(AxisAlignedBB axisAlignedBB, double progress, GSColor color) {
        GSColor fillColor = new GSColor(color, 50);
        GSColor outlineColor = new GSColor(color, 255);
        if (((Boolean)this.sus.getValue()).booleanValue()) {
            progress = Math.pow(progress / 10.0, 2.0);
        }
        if (color == this.doneColor.getColor()) {
            progress = 100.0;
        }
        double centerX = axisAlignedBB.field_72340_a + (axisAlignedBB.field_72336_d - axisAlignedBB.field_72340_a) / 2.0;
        double centerY = axisAlignedBB.field_72338_b + (axisAlignedBB.field_72337_e - axisAlignedBB.field_72338_b) / 2.0;
        double centerZ = axisAlignedBB.field_72339_c + (axisAlignedBB.field_72334_f - axisAlignedBB.field_72339_c) / 2.0;
        double progressValX = progress * ((axisAlignedBB.field_72336_d - centerX) / 100.0);
        double progressValY = progress * ((axisAlignedBB.field_72337_e - centerY) / 100.0);
        double progressValZ = progress * ((axisAlignedBB.field_72334_f - centerZ) / 100.0);
        AxisAlignedBB axisAlignedBB1 = new AxisAlignedBB(centerX - progressValX, centerY - progressValY, centerZ - progressValZ, centerX + progressValX, centerY + progressValY, centerZ + progressValZ);
        switch ((String)this.renderMode.getValue()) {
            case "Fill": {
                RenderUtil.drawBox(axisAlignedBB1, true, 0.0, fillColor, 63);
                break;
            }
            case "Outline": {
                RenderUtil.drawBoundingBox(axisAlignedBB1, (double)((Integer)this.width.getValue()).intValue(), outlineColor);
                break;
            }
            default: {
                RenderUtil.drawBox(axisAlignedBB1, true, 0.0, fillColor, 63);
                RenderUtil.drawBoundingBox(axisAlignedBB1, (double)((Integer)this.width.getValue()).intValue(), outlineColor);
            }
        }
    }
}

