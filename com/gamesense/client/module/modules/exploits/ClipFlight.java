/*
 * Decompiled with CFR 0.152.
 */
package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.events.PlayerMoveEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.world.MotionUtil;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import java.util.Arrays;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;

@Module.Declaration(name="ClipFlight", category=Category.Exploits)
public class ClipFlight
extends Module {
    ModeSetting flight = this.registerMode("Mode", Arrays.asList("Flight", "Clip"), "Clip");
    IntegerSetting packets = this.registerInteger("Packets", 80, 1, 300);
    IntegerSetting speed = this.registerInteger("XZ Speed", 7, -99, 99, () -> ((String)this.flight.getValue()).equalsIgnoreCase("Flight"));
    IntegerSetting speedY = this.registerInteger("Y Speed", 7, -99, 99, () -> !((String)this.flight.getValue()).equalsIgnoreCase("Relative"));
    BooleanSetting bypass = this.registerBoolean("Bypass", false);
    IntegerSetting interval = this.registerInteger("Interval", 25, 1, 100, () -> ((String)this.flight.getValue()).equalsIgnoreCase("Clip"));
    BooleanSetting update = this.registerBoolean("Update Position Client Side", false);
    int num = 0;
    double startFlat = 0.0;
    @EventHandler
    private final Listener<PlayerMoveEvent> playerMoveEventListener = new Listener<PlayerMoveEvent>(event -> {
        double[] dir = MotionUtil.forward(((Integer)this.speed.getValue()).intValue());
        switch ((String)this.flight.getValue()) {
            case "Flight": {
                double xPos = ClipFlight.mc.field_71439_g.field_70165_t;
                double yPos = ClipFlight.mc.field_71439_g.field_70163_u;
                double zPos = ClipFlight.mc.field_71439_g.field_70161_v;
                if (ClipFlight.mc.field_71474_y.field_74314_A.func_151470_d() && !ClipFlight.mc.field_71474_y.field_74311_E.func_151470_d()) {
                    yPos += (double)((Integer)this.speedY.getValue()).intValue();
                } else if (ClipFlight.mc.field_71474_y.field_74311_E.func_151470_d()) {
                    yPos -= (double)((Integer)this.speedY.getValue()).intValue();
                }
                ClipFlight.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayer.Position(xPos += dir[0], yPos, zPos += dir[1], false));
                if (((Boolean)this.update.getValue()).booleanValue()) {
                    ClipFlight.mc.field_71439_g.func_70107_b(xPos, yPos, zPos);
                }
                if (!((Boolean)this.bypass.getValue()).booleanValue()) break;
                ClipFlight.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayer.Position(ClipFlight.mc.field_71439_g.field_70165_t, ClipFlight.mc.field_71439_g.field_70163_u + 0.05, ClipFlight.mc.field_71439_g.field_70161_v, true));
                break;
            }
            case "Clip": {
                if (!ClipFlight.mc.field_71474_y.field_151444_V.func_151470_d() && ClipFlight.mc.field_71439_g.field_70173_aa % (Integer)this.interval.getValue() != 0) break;
                for (int i = 0; i < (Integer)this.packets.getValue(); ++i) {
                    double yposition = ClipFlight.mc.field_71439_g.field_70163_u + (double)((Integer)this.speedY.getValue()).intValue();
                    ClipFlight.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayer.Position(ClipFlight.mc.field_71439_g.field_70165_t, yposition, ClipFlight.mc.field_71439_g.field_70161_v, false));
                    if (((Boolean)this.update.getValue()).booleanValue()) {
                        ClipFlight.mc.field_71439_g.func_70107_b(ClipFlight.mc.field_71439_g.field_70165_t, yposition, ClipFlight.mc.field_71439_g.field_70161_v);
                    }
                    if (!((Boolean)this.bypass.getValue()).booleanValue()) continue;
                    ClipFlight.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayer.Position(ClipFlight.mc.field_71439_g.field_70165_t, ClipFlight.mc.field_71439_g.field_70163_u + 0.05, ClipFlight.mc.field_71439_g.field_70161_v, true));
                }
                break;
            }
        }
    }, new Predicate[0]);

    @Override
    public void onEnable() {
        this.startFlat = ClipFlight.mc.field_71439_g.field_70163_u;
        this.num = 0;
    }
}

