/*
 * Decompiled with CFR 0.152.
 */
package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.events.BlockResetEvent;
import com.gamesense.api.event.events.PacketEvent;
import com.gamesense.api.event.events.PlayerJumpEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.util.misc.Timer;
import com.gamesense.api.util.player.PlayerUtil;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import com.gamesense.client.module.ModuleManager;
import com.gamesense.client.module.modules.movement.Speed;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.BlockContainer;
import net.minecraft.entity.Entity;
import net.minecraft.init.Items;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.server.SPacketPlayerPosLook;

@Module.Declaration(name="PacketUtils", category=Category.Exploits)
public class PacketUtils
extends Module {
    private boolean shouldStop = false;
    BooleanSetting breakReset = this.registerBoolean("No Break Reset", false);
    BooleanSetting noRotate = this.registerBoolean("No Rotate", false);
    BooleanSetting noInteract = this.registerBoolean("No Interact", false);
    BooleanSetting containerOnly = this.registerBoolean("Container Only", false, () -> (Boolean)this.noInteract.getValue());
    BooleanSetting onlyGapple = this.registerBoolean("Only Gapple", false, () -> (Boolean)this.noInteract.getValue());
    BooleanSetting packetJump = this.registerBoolean("Packet Jump", false);
    IntegerSetting delay = this.registerInteger("Min Jump Delay", 0, 0, 50, () -> (Boolean)this.packetJump.getValue());
    public BooleanSetting packetUse = this.registerBoolean("Packet Use", false);
    public BooleanSetting food = this.registerBoolean("Food", true, () -> (Boolean)this.packetUse.getValue());
    public BooleanSetting potion = this.registerBoolean("Potion", true, () -> (Boolean)this.packetUse.getValue());
    public BooleanSetting all = this.registerBoolean("All", false, () -> (Boolean)this.packetUse.getValue());
    Timer timer = new Timer();
    @EventHandler
    private final Listener<PlayerJumpEvent> jumpEventListener = new Listener<PlayerJumpEvent>(event -> {
        if (((Boolean)this.packetJump.getValue()).booleanValue() && ((Integer)this.delay.getValue() == 0 || this.timer.hasReached(((Integer)this.delay.getValue()).intValue(), true) && PacketUtils.mc.field_71439_g.field_70122_E) && !ModuleManager.getModule(Speed.class).isEnabled()) {
            PlayerUtil.fakeJump();
            PacketUtils.mc.field_71439_g.func_70107_b(PacketUtils.mc.field_71439_g.field_70165_t, PacketUtils.mc.field_71439_g.field_70163_u + 1.1661092609382, PacketUtils.mc.field_71439_g.field_70161_v);
            PacketUtils.mc.field_71439_g.field_70181_x = -0.0830778178;
            event.cancel();
        }
    }, new Predicate[0]);
    @EventHandler
    private final Listener<PacketEvent.Send> sendListener = new Listener<PacketEvent.Send>(event -> {
        if (!PlayerUtil.nullCheck()) {
            return;
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && !PacketUtils.mc.field_71439_g.func_70093_af() && ((Boolean)this.noInteract.getValue()).booleanValue()) {
            CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
            if (((Boolean)this.containerOnly.getValue()).booleanValue() && !(PacketUtils.mc.field_71441_e.func_180495_p(packet.func_187023_a()).func_177230_c() instanceof BlockContainer) || ((Boolean)this.onlyGapple.getValue()).booleanValue() && PacketUtils.mc.field_71439_g.func_184614_ca().func_77973_b() != Items.field_151153_ao) {
                return;
            }
            PacketUtils.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketEntityAction((Entity)PacketUtils.mc.field_71439_g, CPacketEntityAction.Action.START_SNEAKING));
            this.shouldStop = true;
        }
    }, new Predicate[0]);
    @EventHandler
    private final Listener<BlockResetEvent> blockResetEventListener = new Listener<BlockResetEvent>(event -> {
        if (!PlayerUtil.nullCheck()) {
            return;
        }
        if (((Boolean)this.breakReset.getValue()).booleanValue()) {
            event.cancel();
        }
    }, new Predicate[0]);
    @EventHandler
    private final Listener<PacketEvent.PostSend> postSendListener = new Listener<PacketEvent.PostSend>(event -> {
        if (!PlayerUtil.nullCheck()) {
            return;
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && this.shouldStop && ((Boolean)this.noInteract.getValue()).booleanValue()) {
            CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
            if (((Boolean)this.containerOnly.getValue()).booleanValue() && !(PacketUtils.mc.field_71441_e.func_180495_p(packet.func_187023_a()).func_177230_c() instanceof BlockContainer)) {
                return;
            }
            PacketUtils.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketEntityAction((Entity)PacketUtils.mc.field_71439_g, CPacketEntityAction.Action.STOP_SNEAKING));
            this.shouldStop = false;
        }
    }, new Predicate[0]);
    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener = new Listener<PacketEvent.Receive>(event -> {
        if (!PlayerUtil.nullCheck()) {
            return;
        }
        if (event.getPacket() instanceof SPacketPlayerPosLook && ((Boolean)this.noRotate.getValue()).booleanValue()) {
            SPacketPlayerPosLook e = (SPacketPlayerPosLook)event.getPacket();
            e.field_148937_e = PacketUtils.mc.field_71439_g.field_70125_A;
            e.field_148936_d = PacketUtils.mc.field_71439_g.field_70177_z;
        }
    }, new Predicate[0]);
}

