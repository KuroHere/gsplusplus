/*
 * Decompiled with CFR 0.152.
 */
package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.events.PacketEvent;
import com.gamesense.api.event.events.RenderEvent;
import com.gamesense.api.setting.values.ColorSetting;
import com.gamesense.api.setting.values.DoubleSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.render.GSColor;
import com.gamesense.api.util.render.RenderUtil;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;

@Module.Declaration(name="NewChunks", category=Category.Exploits)
public class NewChunks
extends Module {
    ModeSetting mode = this.registerMode("Mode", Arrays.asList("Fill", "Outline", "Both"), "Box");
    ColorSetting colorFill = this.registerColor("Color Fill", new GSColor(255, 255, 255, 255), () -> !((String)this.mode.getValue()).equals("Outline"), true);
    ColorSetting colorOutline = this.registerColor("Color Outline", new GSColor(0, 0, 0, 255), () -> !((String)this.mode.getValue()).equals("Fill"), true);
    IntegerSetting lineWidth = this.registerInteger("Line Width", 1, 1, 5);
    DoubleSetting heigth = this.registerDouble("Height", 1.0, 0.0, 10.0);
    private final List<ChunkData> chunkDataList = new ArrayList<ChunkData>();
    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener = new Listener<PacketEvent.Receive>(event -> {
        ChunkData chunk;
        SPacketChunkData packet;
        if (event.getPacket() instanceof SPacketChunkData && !(packet = (SPacketChunkData)event.getPacket()).func_149274_i() && !this.contains(chunk = new ChunkData(packet.func_149273_e() * 16, packet.func_149271_f() * 16))) {
            this.chunkDataList.add(chunk);
        }
    }, new Predicate[0]);

    @Override
    public void onWorldRender(RenderEvent event) {
        if (mc.func_175606_aa() == null) {
            return;
        }
        block10: for (int i = this.chunkDataList.size() - 1; i >= 0; --i) {
            ChunkData chunkData = this.chunkDataList.get(i);
            if (chunkData == null) continue;
            AxisAlignedBB bb = new AxisAlignedBB((double)chunkData.x, 0.0, (double)chunkData.z, (double)(chunkData.x + 16), ((Double)this.heigth.getValue()).doubleValue(), (double)(chunkData.z + 16));
            switch ((String)this.mode.getValue()) {
                case "Box": {
                    RenderUtil.drawBox(bb, true, 1.0, this.colorFill.getValue(), this.colorFill.getValue().getAlpha(), 63);
                    continue block10;
                }
                case "Outline": {
                    RenderUtil.drawBoundingBox(bb, (double)((Integer)this.lineWidth.getValue()).intValue(), this.colorOutline.getValue(), this.colorOutline.getValue().getAlpha());
                    continue block10;
                }
                case "Both": {
                    RenderUtil.drawBox(bb, true, 1.0, this.colorFill.getValue(), this.colorFill.getValue().getAlpha(), 63);
                    RenderUtil.drawBoundingBox(bb, (double)((Integer)this.lineWidth.getValue()).intValue(), this.colorOutline.getValue(), this.colorOutline.getValue().getAlpha());
                }
            }
        }
    }

    private boolean contains(ChunkData chunkData) {
        boolean temp = false;
        for (ChunkData data : this.chunkDataList) {
            if (data.x != chunkData.x || data.z != chunkData.z) continue;
            temp = true;
        }
        return temp;
    }

    public static class ChunkData {
        private int x;
        private int z;

        public ChunkData(int x, int z) {
            this.x = x;
            this.z = z;
        }

        public int getX() {
            return this.x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getZ() {
            return this.z;
        }

        public void setZ(int z) {
            this.z = z;
        }
    }
}

